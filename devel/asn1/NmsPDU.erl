%% Generated by the Erlang ASN.1 BER_V2-compiler version, utilizing bit-syntax:1.8
%% Purpose: encoder and decoder to the types in mod NmsPDU

-module('NmsPDU').
-define('RT_BER',asn1rt_ber_bin_v2).
-asn1_info([{vsn,'1.8'},
            {module,'NmsPDU'},
            {options,[ber_bin_v2,warnings,errors,{cwd,[47,104,111,109,101,47,115,101,98,47,115,114,99,47,116,107,111,114,100,101,114,45,113,116,45,48,46,49,46,48,47,116,101,115,116,47,97,115,110,49]},{outdir,[47,104,111,109,101,47,115,101,98,47,115,114,99,47,116,107,111,114,100,101,114,45,113,116,45,48,46,49,46,48,47,116,101,115,116,47,97,115,110,49]},nif,optimize,warnings_as_errors,{i,[46]},{i,[47,104,111,109,101,47,115,101,98,47,115,114,99,47,116,107,111,114,100,101,114,45,113,116,45,48,46,49,46,48,47,116,101,115,116,47,97,115,110,49]}]}]).

-export([encoding_rule/0]).
-export([
'enc_PDU'/2
]).

-export([
'dec_PDU'/2
]).

-export([info/0]).


-export([encode/2,decode/2,encode_disp/2,decode_disp/2]).

encoding_rule() ->
   ber_bin_v2.

encode(Type,Data) ->
case catch encode_disp(Type,Data) of
  {'EXIT',{error,Reason}} ->
    {error,Reason};
  {'EXIT',Reason} ->
    {error,{asn1,Reason}};
  {Bytes,_Len} ->
    {ok,Bytes};
  Bytes ->
    {ok,Bytes}
end.

decode(Type,Data) ->
case catch decode_disp(Type,element(1,?RT_BER:decode(Data,nif))
) of
  {'EXIT',{error,Reason}} ->
    {error,Reason};
  {'EXIT',Reason} ->
    {error,{asn1,Reason}};
  Result ->
    {ok,Result}
end.

encode_disp('PDU',Data) -> 'enc_PDU'(Data);
encode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).


decode_disp('PDU',Data) -> 'dec_PDU'(Data);
decode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).





info() ->
   case ?MODULE:module_info() of
      MI when is_list(MI) ->
         case lists:keysearch(attributes,1,MI) of
            {value,{_,Attributes}} when is_list(Attributes) ->
               case lists:keysearch(asn1_info,1,Attributes) of
                  {value,{_,Info}} when is_list(Info) ->
                     Info;
                  _ ->
                     []
               end;
            _ ->
               []
         end
   end.


%%================================
%%  PDU
%%================================
'enc_PDU'(Val) ->
    'enc_PDU'(Val, []).


'enc_PDU'({'PDU',Val}, TagIn) ->
   'enc_PDU'(Val, TagIn);

'enc_PDU'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      modTest ->
         'ModTest':'enc_TestPDU'(element(2,Val), [<<161>>]);
      modTrackerPDU ->
         'ModTracker':'enc_TrackerPDU'(element(2,Val), [<<162>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn, EncBytes, EncLen).




'dec_PDU'(Tlv) ->
   'dec_PDU'(Tlv, []).

'dec_PDU'(Tlv, TagIn) ->
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'modTest'
    {131073, V1} -> 
        {modTest, 'ModTest':'dec_TestPDU'(V1, [])};


%% 'modTrackerPDU'
    {131074, V1} -> 
        {modTrackerPDU, 'ModTracker':'dec_TrackerPDU'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.

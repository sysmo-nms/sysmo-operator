%% Generated by the Erlang ASN.1 BER_V2-compiler version, utilizing bit-syntax:1.8
%% Purpose: encoder and decoder to the types in mod ModTracker

-module('ModTracker').
-include("ModTracker.hrl").
-define('RT_BER',asn1rt_ber_bin_v2).
-asn1_info([{vsn,'1.8'},
            {module,'ModTracker'},
            {options,[ber_bin_v2,warnings,errors,{cwd,[47,104,111,109,101,47,115,101,98,47,115,114,99,47,116,107,111,114,100,101,114,45,113,116,45,48,46,49,46,48,47,116,101,115,116,47,97,115,110,49]},{outdir,[47,104,111,109,101,47,115,101,98,47,115,114,99,47,116,107,111,114,100,101,114,45,113,116,45,48,46,49,46,48,47,116,101,115,116,47,97,115,110,49]},nif,optimize,warnings_as_errors,{i,[46]},{i,[47,104,111,109,101,47,115,101,98,47,115,114,99,47,116,107,111,114,100,101,114,45,113,116,45,48,46,49,46,48,47,116,101,115,116,47,97,115,110,49]}]}]).

-export([encoding_rule/0]).
-export([
'enc_IpAdd'/2,
'enc_ErlangModule'/2,
'enc_Second'/2,
'enc_CommandId'/2,
'enc_CommandMsg'/2,
'enc_GroupName'/2,
'enc_PermConf'/2,
'enc_TargetId'/2,
'enc_TargetHostname'/2,
'enc_TargetSysname'/2,
'enc_TargetTags'/2,
'enc_TargetTag'/2,
'enc_TargetProperties'/2,
'enc_TargetProperty'/2,
'enc_TargetInfoType'/2,
'enc_ProbeId'/2,
'enc_ProbeName'/2,
'enc_ProbeMod'/2,
'enc_ProbeStatus'/2,
'enc_ProbeType'/2,
'enc_ProbeInfoType'/2,
'enc_ProbeValue'/2,
'enc_ProbeStep'/2,
'enc_ProbeTimeoutMax'/2,
'enc_ProbeTimeoutWait'/2,
'enc_ProbeInspectors'/2,
'enc_ProbeRRDCreate'/2,
'enc_ProbeRRDUpdate'/2,
'enc_ProbeRRDGraph'/2,
'enc_ProbeConf'/2,
'enc_RRDFile'/2,
'enc_ProbeInfo'/2,
'enc_ProbeModuleInfo'/2,
'enc_ProbeDump'/2,
'enc_ProbeFetch'/2,
'enc_TargetInfo'/2,
'enc_CommandResponce'/2,
'enc_TargetCreate'/2,
'enc_ProbeCreate'/2,
'enc_TargetUpdate'/2,
'enc_TargetDelete'/2,
'enc_ProbeUpdate'/2,
'enc_ProbeDelete'/2,
'enc_TrackerPDU'/2
]).

-export([
'dec_IpAdd'/2,
'dec_ErlangModule'/2,
'dec_Second'/2,
'dec_CommandId'/2,
'dec_CommandMsg'/2,
'dec_GroupName'/2,
'dec_PermConf'/2,
'dec_TargetId'/2,
'dec_TargetHostname'/2,
'dec_TargetSysname'/2,
'dec_TargetTags'/2,
'dec_TargetTag'/2,
'dec_TargetProperties'/2,
'dec_TargetProperty'/2,
'dec_TargetInfoType'/2,
'dec_ProbeId'/2,
'dec_ProbeName'/2,
'dec_ProbeMod'/2,
'dec_ProbeStatus'/2,
'dec_ProbeType'/2,
'dec_ProbeInfoType'/2,
'dec_ProbeValue'/2,
'dec_ProbeStep'/2,
'dec_ProbeTimeoutMax'/2,
'dec_ProbeTimeoutWait'/2,
'dec_ProbeInspectors'/2,
'dec_ProbeRRDCreate'/2,
'dec_ProbeRRDUpdate'/2,
'dec_ProbeRRDGraph'/2,
'dec_ProbeConf'/2,
'dec_RRDFile'/2,
'dec_ProbeInfo'/2,
'dec_ProbeModuleInfo'/2,
'dec_ProbeDump'/2,
'dec_ProbeFetch'/2,
'dec_TargetInfo'/2,
'dec_CommandResponce'/2,
'dec_TargetCreate'/2,
'dec_ProbeCreate'/2,
'dec_TargetUpdate'/2,
'dec_TargetDelete'/2,
'dec_ProbeUpdate'/2,
'dec_ProbeDelete'/2,
'dec_TrackerPDU'/2
]).

-export([info/0]).


-export([encode/2,decode/2,encode_disp/2,decode_disp/2]).

encoding_rule() ->
   ber_bin_v2.

encode(Type,Data) ->
case catch encode_disp(Type,Data) of
  {'EXIT',{error,Reason}} ->
    {error,Reason};
  {'EXIT',Reason} ->
    {error,{asn1,Reason}};
  {Bytes,_Len} ->
    {ok,Bytes};
  Bytes ->
    {ok,Bytes}
end.

decode(Type,Data) ->
case catch decode_disp(Type,element(1,?RT_BER:decode(Data,nif))
) of
  {'EXIT',{error,Reason}} ->
    {error,Reason};
  {'EXIT',Reason} ->
    {error,{asn1,Reason}};
  Result ->
    {ok,Result}
end.

encode_disp('IpAdd',Data) -> 'enc_IpAdd'(Data);
encode_disp('ErlangModule',Data) -> 'enc_ErlangModule'(Data);
encode_disp('Second',Data) -> 'enc_Second'(Data);
encode_disp('CommandId',Data) -> 'enc_CommandId'(Data);
encode_disp('CommandMsg',Data) -> 'enc_CommandMsg'(Data);
encode_disp('GroupName',Data) -> 'enc_GroupName'(Data);
encode_disp('PermConf',Data) -> 'enc_PermConf'(Data);
encode_disp('TargetId',Data) -> 'enc_TargetId'(Data);
encode_disp('TargetHostname',Data) -> 'enc_TargetHostname'(Data);
encode_disp('TargetSysname',Data) -> 'enc_TargetSysname'(Data);
encode_disp('TargetTags',Data) -> 'enc_TargetTags'(Data);
encode_disp('TargetTag',Data) -> 'enc_TargetTag'(Data);
encode_disp('TargetProperties',Data) -> 'enc_TargetProperties'(Data);
encode_disp('TargetProperty',Data) -> 'enc_TargetProperty'(Data);
encode_disp('TargetInfoType',Data) -> 'enc_TargetInfoType'(Data);
encode_disp('ProbeId',Data) -> 'enc_ProbeId'(Data);
encode_disp('ProbeName',Data) -> 'enc_ProbeName'(Data);
encode_disp('ProbeMod',Data) -> 'enc_ProbeMod'(Data);
encode_disp('ProbeStatus',Data) -> 'enc_ProbeStatus'(Data);
encode_disp('ProbeType',Data) -> 'enc_ProbeType'(Data);
encode_disp('ProbeInfoType',Data) -> 'enc_ProbeInfoType'(Data);
encode_disp('ProbeValue',Data) -> 'enc_ProbeValue'(Data);
encode_disp('ProbeStep',Data) -> 'enc_ProbeStep'(Data);
encode_disp('ProbeTimeoutMax',Data) -> 'enc_ProbeTimeoutMax'(Data);
encode_disp('ProbeTimeoutWait',Data) -> 'enc_ProbeTimeoutWait'(Data);
encode_disp('ProbeInspectors',Data) -> 'enc_ProbeInspectors'(Data);
encode_disp('ProbeRRDCreate',Data) -> 'enc_ProbeRRDCreate'(Data);
encode_disp('ProbeRRDUpdate',Data) -> 'enc_ProbeRRDUpdate'(Data);
encode_disp('ProbeRRDGraph',Data) -> 'enc_ProbeRRDGraph'(Data);
encode_disp('ProbeConf',Data) -> 'enc_ProbeConf'(Data);
encode_disp('RRDFile',Data) -> 'enc_RRDFile'(Data);
encode_disp('ProbeInfo',Data) -> 'enc_ProbeInfo'(Data);
encode_disp('ProbeModuleInfo',Data) -> 'enc_ProbeModuleInfo'(Data);
encode_disp('ProbeDump',Data) -> 'enc_ProbeDump'(Data);
encode_disp('ProbeFetch',Data) -> 'enc_ProbeFetch'(Data);
encode_disp('TargetInfo',Data) -> 'enc_TargetInfo'(Data);
encode_disp('CommandResponce',Data) -> 'enc_CommandResponce'(Data);
encode_disp('TargetCreate',Data) -> 'enc_TargetCreate'(Data);
encode_disp('ProbeCreate',Data) -> 'enc_ProbeCreate'(Data);
encode_disp('TargetUpdate',Data) -> 'enc_TargetUpdate'(Data);
encode_disp('TargetDelete',Data) -> 'enc_TargetDelete'(Data);
encode_disp('ProbeUpdate',Data) -> 'enc_ProbeUpdate'(Data);
encode_disp('ProbeDelete',Data) -> 'enc_ProbeDelete'(Data);
encode_disp('TrackerPDU',Data) -> 'enc_TrackerPDU'(Data);
encode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).


decode_disp('IpAdd',Data) -> 'dec_IpAdd'(Data);
decode_disp('ErlangModule',Data) -> 'dec_ErlangModule'(Data);
decode_disp('Second',Data) -> 'dec_Second'(Data);
decode_disp('CommandId',Data) -> 'dec_CommandId'(Data);
decode_disp('CommandMsg',Data) -> 'dec_CommandMsg'(Data);
decode_disp('GroupName',Data) -> 'dec_GroupName'(Data);
decode_disp('PermConf',Data) -> 'dec_PermConf'(Data);
decode_disp('TargetId',Data) -> 'dec_TargetId'(Data);
decode_disp('TargetHostname',Data) -> 'dec_TargetHostname'(Data);
decode_disp('TargetSysname',Data) -> 'dec_TargetSysname'(Data);
decode_disp('TargetTags',Data) -> 'dec_TargetTags'(Data);
decode_disp('TargetTag',Data) -> 'dec_TargetTag'(Data);
decode_disp('TargetProperties',Data) -> 'dec_TargetProperties'(Data);
decode_disp('TargetProperty',Data) -> 'dec_TargetProperty'(Data);
decode_disp('TargetInfoType',Data) -> 'dec_TargetInfoType'(Data);
decode_disp('ProbeId',Data) -> 'dec_ProbeId'(Data);
decode_disp('ProbeName',Data) -> 'dec_ProbeName'(Data);
decode_disp('ProbeMod',Data) -> 'dec_ProbeMod'(Data);
decode_disp('ProbeStatus',Data) -> 'dec_ProbeStatus'(Data);
decode_disp('ProbeType',Data) -> 'dec_ProbeType'(Data);
decode_disp('ProbeInfoType',Data) -> 'dec_ProbeInfoType'(Data);
decode_disp('ProbeValue',Data) -> 'dec_ProbeValue'(Data);
decode_disp('ProbeStep',Data) -> 'dec_ProbeStep'(Data);
decode_disp('ProbeTimeoutMax',Data) -> 'dec_ProbeTimeoutMax'(Data);
decode_disp('ProbeTimeoutWait',Data) -> 'dec_ProbeTimeoutWait'(Data);
decode_disp('ProbeInspectors',Data) -> 'dec_ProbeInspectors'(Data);
decode_disp('ProbeRRDCreate',Data) -> 'dec_ProbeRRDCreate'(Data);
decode_disp('ProbeRRDUpdate',Data) -> 'dec_ProbeRRDUpdate'(Data);
decode_disp('ProbeRRDGraph',Data) -> 'dec_ProbeRRDGraph'(Data);
decode_disp('ProbeConf',Data) -> 'dec_ProbeConf'(Data);
decode_disp('RRDFile',Data) -> 'dec_RRDFile'(Data);
decode_disp('ProbeInfo',Data) -> 'dec_ProbeInfo'(Data);
decode_disp('ProbeModuleInfo',Data) -> 'dec_ProbeModuleInfo'(Data);
decode_disp('ProbeDump',Data) -> 'dec_ProbeDump'(Data);
decode_disp('ProbeFetch',Data) -> 'dec_ProbeFetch'(Data);
decode_disp('TargetInfo',Data) -> 'dec_TargetInfo'(Data);
decode_disp('CommandResponce',Data) -> 'dec_CommandResponce'(Data);
decode_disp('TargetCreate',Data) -> 'dec_TargetCreate'(Data);
decode_disp('ProbeCreate',Data) -> 'dec_ProbeCreate'(Data);
decode_disp('TargetUpdate',Data) -> 'dec_TargetUpdate'(Data);
decode_disp('TargetDelete',Data) -> 'dec_TargetDelete'(Data);
decode_disp('ProbeUpdate',Data) -> 'dec_ProbeUpdate'(Data);
decode_disp('ProbeDelete',Data) -> 'dec_ProbeDelete'(Data);
decode_disp('TrackerPDU',Data) -> 'dec_TrackerPDU'(Data);
decode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).





info() ->
   case ?MODULE:module_info() of
      MI when is_list(MI) ->
         case lists:keysearch(attributes,1,MI) of
            {value,{_,Attributes}} when is_list(Attributes) ->
               case lists:keysearch(asn1_info,1,Attributes) of
                  {value,{_,Info}} when is_list(Info) ->
                     Info;
                  _ ->
                     []
               end;
            _ ->
               []
         end
   end.


%%================================
%%  IpAdd
%%================================
'enc_IpAdd'(Val) ->
    'enc_IpAdd'(Val, [<<19>>]).


'enc_IpAdd'({'IpAdd',Val}, TagIn) ->
   'enc_IpAdd'(Val, TagIn);

'enc_IpAdd'(Val, TagIn) ->
?RT_BER:encode_restricted_string([], Val, 19, TagIn).


'dec_IpAdd'(Tlv) ->
   'dec_IpAdd'(Tlv, [19]).

'dec_IpAdd'(Tlv, TagIn) ->
?RT_BER:decode_restricted_string(Tlv,[],19,TagIn).



%%================================
%%  ErlangModule
%%================================
'enc_ErlangModule'(Val) ->
    'enc_ErlangModule'(Val, [<<19>>]).


'enc_ErlangModule'({'ErlangModule',Val}, TagIn) ->
   'enc_ErlangModule'(Val, TagIn);

'enc_ErlangModule'(Val, TagIn) ->
?RT_BER:encode_restricted_string([], Val, 19, TagIn).


'dec_ErlangModule'(Tlv) ->
   'dec_ErlangModule'(Tlv, [19]).

'dec_ErlangModule'(Tlv, TagIn) ->
?RT_BER:decode_restricted_string(Tlv,[],19,TagIn).



%%================================
%%  Second
%%================================
'enc_Second'(Val) ->
    'enc_Second'(Val, [<<2>>]).


'enc_Second'({'Second',Val}, TagIn) ->
   'enc_Second'(Val, TagIn);

'enc_Second'(Val, TagIn) ->
?RT_BER:encode_integer([], Val, TagIn).


'dec_Second'(Tlv) ->
   'dec_Second'(Tlv, [2]).

'dec_Second'(Tlv, TagIn) ->
?RT_BER:decode_integer(Tlv,[],TagIn).



%%================================
%%  CommandId
%%================================
'enc_CommandId'(Val) ->
    'enc_CommandId'(Val, [<<2>>]).


'enc_CommandId'({'CommandId',Val}, TagIn) ->
   'enc_CommandId'(Val, TagIn);

'enc_CommandId'(Val, TagIn) ->
?RT_BER:encode_integer([], Val, TagIn).


'dec_CommandId'(Tlv) ->
   'dec_CommandId'(Tlv, [2]).

'dec_CommandId'(Tlv, TagIn) ->
?RT_BER:decode_integer(Tlv,[],TagIn).



%%================================
%%  CommandMsg
%%================================
'enc_CommandMsg'(Val) ->
    'enc_CommandMsg'(Val, [<<19>>]).


'enc_CommandMsg'({'CommandMsg',Val}, TagIn) ->
   'enc_CommandMsg'(Val, TagIn);

'enc_CommandMsg'(Val, TagIn) ->
?RT_BER:encode_restricted_string([], Val, 19, TagIn).


'dec_CommandMsg'(Tlv) ->
   'dec_CommandMsg'(Tlv, [19]).

'dec_CommandMsg'(Tlv, TagIn) ->
?RT_BER:decode_restricted_string(Tlv,[],19,TagIn).



%%================================
%%  GroupName
%%================================
'enc_GroupName'(Val) ->
    'enc_GroupName'(Val, [<<19>>]).


'enc_GroupName'({'GroupName',Val}, TagIn) ->
   'enc_GroupName'(Val, TagIn);

'enc_GroupName'(Val, TagIn) ->
?RT_BER:encode_restricted_string([], Val, 19, TagIn).


'dec_GroupName'(Tlv) ->
   'dec_GroupName'(Tlv, [19]).

'dec_GroupName'(Tlv, TagIn) ->
?RT_BER:decode_restricted_string(Tlv,{0,50},19,TagIn).



%%================================
%%  PermConf
%%================================
'enc_PermConf'(Val) ->
    'enc_PermConf'(Val, [<<48>>]).

'enc_PermConf'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute read(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_PermConf_read'(Cindex1, [<<48>>]),

%%-------------------------------------------------
%% attribute write(2) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_PermConf_write'(Cindex2, [<<48>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  PermConf_read
%%================================

'enc_PermConf_read'({'PermConf_read',Val}, TagIn) ->
   'enc_PermConf_read'(Val, TagIn);

'enc_PermConf_read'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_PermConf_read_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn, EncBytes, EncLen).

'enc_PermConf_read_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_PermConf_read_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = ?RT_BER:encode_restricted_string([], H, 19, [<<19>>]),
   'enc_PermConf_read_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_PermConf_read'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 
[?RT_BER:decode_restricted_string(V1,{0,50},19,[19]) || V1 <- Tlv1].





%%================================
%%  PermConf_write
%%================================

'enc_PermConf_write'({'PermConf_write',Val}, TagIn) ->
   'enc_PermConf_write'(Val, TagIn);

'enc_PermConf_write'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_PermConf_write_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn, EncBytes, EncLen).

'enc_PermConf_write_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_PermConf_write_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = ?RT_BER:encode_restricted_string([], H, 19, [<<19>>]),
   'enc_PermConf_write_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_PermConf_write'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 
[?RT_BER:decode_restricted_string(V1,{0,50},19,[19]) || V1 <- Tlv1].




'dec_PermConf'(Tlv) ->
   'dec_PermConf'(Tlv, [16]).

'dec_PermConf'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 

%%-------------------------------------------------
%% attribute read(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_PermConf_read'(V1, [16]),

%%-------------------------------------------------
%% attribute write(2) with type SEQUENCE OF
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_PermConf_write'(V2, [16]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'PermConf', Term1, Term2}.



%%================================
%%  TargetId
%%================================
'enc_TargetId'(Val) ->
    'enc_TargetId'(Val, [<<19>>]).


'enc_TargetId'({'TargetId',Val}, TagIn) ->
   'enc_TargetId'(Val, TagIn);

'enc_TargetId'(Val, TagIn) ->
?RT_BER:encode_restricted_string([], Val, 19, TagIn).


'dec_TargetId'(Tlv) ->
   'dec_TargetId'(Tlv, [19]).

'dec_TargetId'(Tlv, TagIn) ->
?RT_BER:decode_restricted_string(Tlv,{0,50},19,TagIn).



%%================================
%%  TargetHostname
%%================================
'enc_TargetHostname'(Val) ->
    'enc_TargetHostname'(Val, [<<19>>]).


'enc_TargetHostname'({'TargetHostname',Val}, TagIn) ->
   'enc_TargetHostname'(Val, TagIn);

'enc_TargetHostname'(Val, TagIn) ->
?RT_BER:encode_restricted_string([], Val, 19, TagIn).


'dec_TargetHostname'(Tlv) ->
   'dec_TargetHostname'(Tlv, [19]).

'dec_TargetHostname'(Tlv, TagIn) ->
?RT_BER:decode_restricted_string(Tlv,{0,50},19,TagIn).



%%================================
%%  TargetSysname
%%================================
'enc_TargetSysname'(Val) ->
    'enc_TargetSysname'(Val, [<<19>>]).


'enc_TargetSysname'({'TargetSysname',Val}, TagIn) ->
   'enc_TargetSysname'(Val, TagIn);

'enc_TargetSysname'(Val, TagIn) ->
?RT_BER:encode_restricted_string([], Val, 19, TagIn).


'dec_TargetSysname'(Tlv) ->
   'dec_TargetSysname'(Tlv, [19]).

'dec_TargetSysname'(Tlv, TagIn) ->
?RT_BER:decode_restricted_string(Tlv,{0,50},19,TagIn).



%%================================
%%  TargetTags
%%================================
'enc_TargetTags'(Val) ->
    'enc_TargetTags'(Val, [<<48>>]).


'enc_TargetTags'({'TargetTags',Val}, TagIn) ->
   'enc_TargetTags'(Val, TagIn);

'enc_TargetTags'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_TargetTags_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn, EncBytes, EncLen).

'enc_TargetTags_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_TargetTags_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = ?RT_BER:encode_restricted_string([], H, 19, [<<19>>]),
   'enc_TargetTags_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_TargetTags'(Tlv) ->
   'dec_TargetTags'(Tlv, [16]).

'dec_TargetTags'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 
[?RT_BER:decode_restricted_string(V1,{0,50},19,[19]) || V1 <- Tlv1].




%%================================
%%  TargetTag
%%================================
'enc_TargetTag'(Val) ->
    'enc_TargetTag'(Val, [<<19>>]).


'enc_TargetTag'({'TargetTag',Val}, TagIn) ->
   'enc_TargetTag'(Val, TagIn);

'enc_TargetTag'(Val, TagIn) ->
?RT_BER:encode_restricted_string([], Val, 19, TagIn).


'dec_TargetTag'(Tlv) ->
   'dec_TargetTag'(Tlv, [19]).

'dec_TargetTag'(Tlv, TagIn) ->
?RT_BER:decode_restricted_string(Tlv,{0,50},19,TagIn).



%%================================
%%  TargetProperties
%%================================
'enc_TargetProperties'(Val) ->
    'enc_TargetProperties'(Val, [<<48>>]).


'enc_TargetProperties'({'TargetProperties',Val}, TagIn) ->
   'enc_TargetProperties'(Val, TagIn);

'enc_TargetProperties'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_TargetProperties_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn, EncBytes, EncLen).

'enc_TargetProperties_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_TargetProperties_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = ?RT_BER:encode_restricted_string([], H, 19, [<<19>>]),
   'enc_TargetProperties_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_TargetProperties'(Tlv) ->
   'dec_TargetProperties'(Tlv, [16]).

'dec_TargetProperties'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 
[?RT_BER:decode_restricted_string(V1,[],19,[19]) || V1 <- Tlv1].




%%================================
%%  TargetProperty
%%================================
'enc_TargetProperty'(Val) ->
    'enc_TargetProperty'(Val, [<<19>>]).


'enc_TargetProperty'({'TargetProperty',Val}, TagIn) ->
   'enc_TargetProperty'(Val, TagIn);

'enc_TargetProperty'(Val, TagIn) ->
?RT_BER:encode_restricted_string([], Val, 19, TagIn).


'dec_TargetProperty'(Tlv) ->
   'dec_TargetProperty'(Tlv, [19]).

'dec_TargetProperty'(Tlv, TagIn) ->
?RT_BER:decode_restricted_string(Tlv,[],19,TagIn).



%%================================
%%  TargetInfoType
%%================================
'enc_TargetInfoType'(Val) ->
    'enc_TargetInfoType'(Val, [<<10>>]).


'enc_TargetInfoType'({'TargetInfoType',Val}, TagIn) ->
   'enc_TargetInfoType'(Val, TagIn);

'enc_TargetInfoType'(Val, TagIn) ->
case Val of
create -> ?RT_BER:encode_enumerated(0,TagIn);
delete -> ?RT_BER:encode_enumerated(1,TagIn);
update -> ?RT_BER:encode_enumerated(2,TagIn);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_TargetInfoType'(Tlv) ->
   'dec_TargetInfoType'(Tlv, [10]).

'dec_TargetInfoType'(Tlv, TagIn) ->
?RT_BER:decode_enumerated(Tlv,[],[{create,0},{delete,1},{update,2}],TagIn).



%%================================
%%  ProbeId
%%================================
'enc_ProbeId'(Val) ->
    'enc_ProbeId'(Val, [<<2>>]).


'enc_ProbeId'({'ProbeId',Val}, TagIn) ->
   'enc_ProbeId'(Val, TagIn);

'enc_ProbeId'(Val, TagIn) ->
?RT_BER:encode_integer([], Val, TagIn).


'dec_ProbeId'(Tlv) ->
   'dec_ProbeId'(Tlv, [2]).

'dec_ProbeId'(Tlv, TagIn) ->
?RT_BER:decode_integer(Tlv,[],TagIn).



%%================================
%%  ProbeName
%%================================
'enc_ProbeName'(Val) ->
    'enc_ProbeName'(Val, [<<19>>]).


'enc_ProbeName'({'ProbeName',Val}, TagIn) ->
   'enc_ProbeName'(Val, TagIn);

'enc_ProbeName'(Val, TagIn) ->
?RT_BER:encode_restricted_string([], Val, 19, TagIn).


'dec_ProbeName'(Tlv) ->
   'dec_ProbeName'(Tlv, [19]).

'dec_ProbeName'(Tlv, TagIn) ->
?RT_BER:decode_restricted_string(Tlv,{0,30},19,TagIn).



%%================================
%%  ProbeMod
%%================================
'enc_ProbeMod'(Val) ->
    'enc_ProbeMod'(Val, [<<19>>]).


'enc_ProbeMod'({'ProbeMod',Val}, TagIn) ->
   'enc_ProbeMod'(Val, TagIn);

'enc_ProbeMod'(Val, TagIn) ->
?RT_BER:encode_restricted_string([], Val, 19, TagIn).


'dec_ProbeMod'(Tlv) ->
   'dec_ProbeMod'(Tlv, [19]).

'dec_ProbeMod'(Tlv, TagIn) ->
?RT_BER:decode_restricted_string(Tlv,{0,30},19,TagIn).



%%================================
%%  ProbeStatus
%%================================
'enc_ProbeStatus'(Val) ->
    'enc_ProbeStatus'(Val, [<<19>>]).


'enc_ProbeStatus'({'ProbeStatus',Val}, TagIn) ->
   'enc_ProbeStatus'(Val, TagIn);

'enc_ProbeStatus'(Val, TagIn) ->
?RT_BER:encode_restricted_string([], Val, 19, TagIn).


'dec_ProbeStatus'(Tlv) ->
   'dec_ProbeStatus'(Tlv, [19]).

'dec_ProbeStatus'(Tlv, TagIn) ->
?RT_BER:decode_restricted_string(Tlv,{0,15},19,TagIn).



%%================================
%%  ProbeType
%%================================
'enc_ProbeType'(Val) ->
    'enc_ProbeType'(Val, [<<10>>]).


'enc_ProbeType'({'ProbeType',Val}, TagIn) ->
   'enc_ProbeType'(Val, TagIn);

'enc_ProbeType'(Val, TagIn) ->
case Val of
fetch -> ?RT_BER:encode_enumerated(0,TagIn);
status -> ?RT_BER:encode_enumerated(1,TagIn);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_ProbeType'(Tlv) ->
   'dec_ProbeType'(Tlv, [10]).

'dec_ProbeType'(Tlv, TagIn) ->
?RT_BER:decode_enumerated(Tlv,[],[{fetch,0},{status,1}],TagIn).



%%================================
%%  ProbeInfoType
%%================================
'enc_ProbeInfoType'(Val) ->
    'enc_ProbeInfoType'(Val, [<<10>>]).


'enc_ProbeInfoType'({'ProbeInfoType',Val}, TagIn) ->
   'enc_ProbeInfoType'(Val, TagIn);

'enc_ProbeInfoType'(Val, TagIn) ->
case Val of
create -> ?RT_BER:encode_enumerated(0,TagIn);
delete -> ?RT_BER:encode_enumerated(1,TagIn);
update -> ?RT_BER:encode_enumerated(2,TagIn);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_ProbeInfoType'(Tlv) ->
   'dec_ProbeInfoType'(Tlv, [10]).

'dec_ProbeInfoType'(Tlv, TagIn) ->
?RT_BER:decode_enumerated(Tlv,[],[{create,0},{delete,1},{update,2}],TagIn).



%%================================
%%  ProbeValue
%%================================
'enc_ProbeValue'(Val) ->
    'enc_ProbeValue'(Val, [<<2>>]).


'enc_ProbeValue'({'ProbeValue',Val}, TagIn) ->
   'enc_ProbeValue'(Val, TagIn);

'enc_ProbeValue'(Val, TagIn) ->
?RT_BER:encode_integer([], Val, TagIn).


'dec_ProbeValue'(Tlv) ->
   'dec_ProbeValue'(Tlv, [2]).

'dec_ProbeValue'(Tlv, TagIn) ->
?RT_BER:decode_integer(Tlv,[],TagIn).



%%================================
%%  ProbeStep
%%================================
'enc_ProbeStep'(Val) ->
    'enc_ProbeStep'(Val, [<<2>>]).


'enc_ProbeStep'({'ProbeStep',Val}, TagIn) ->
   'enc_ProbeStep'(Val, TagIn);

'enc_ProbeStep'(Val, TagIn) ->
?RT_BER:encode_integer([], Val, TagIn).


'dec_ProbeStep'(Tlv) ->
   'dec_ProbeStep'(Tlv, [2]).

'dec_ProbeStep'(Tlv, TagIn) ->
?RT_BER:decode_integer(Tlv,[],TagIn).



%%================================
%%  ProbeTimeoutMax
%%================================
'enc_ProbeTimeoutMax'(Val) ->
    'enc_ProbeTimeoutMax'(Val, [<<2>>]).


'enc_ProbeTimeoutMax'({'ProbeTimeoutMax',Val}, TagIn) ->
   'enc_ProbeTimeoutMax'(Val, TagIn);

'enc_ProbeTimeoutMax'(Val, TagIn) ->
?RT_BER:encode_integer([], Val, TagIn).


'dec_ProbeTimeoutMax'(Tlv) ->
   'dec_ProbeTimeoutMax'(Tlv, [2]).

'dec_ProbeTimeoutMax'(Tlv, TagIn) ->
?RT_BER:decode_integer(Tlv,[],TagIn).



%%================================
%%  ProbeTimeoutWait
%%================================
'enc_ProbeTimeoutWait'(Val) ->
    'enc_ProbeTimeoutWait'(Val, [<<2>>]).


'enc_ProbeTimeoutWait'({'ProbeTimeoutWait',Val}, TagIn) ->
   'enc_ProbeTimeoutWait'(Val, TagIn);

'enc_ProbeTimeoutWait'(Val, TagIn) ->
?RT_BER:encode_integer([], Val, TagIn).


'dec_ProbeTimeoutWait'(Tlv) ->
   'dec_ProbeTimeoutWait'(Tlv, [2]).

'dec_ProbeTimeoutWait'(Tlv, TagIn) ->
?RT_BER:decode_integer(Tlv,[],TagIn).



%%================================
%%  ProbeInspectors
%%================================
'enc_ProbeInspectors'(Val) ->
    'enc_ProbeInspectors'(Val, [<<48>>]).


'enc_ProbeInspectors'({'ProbeInspectors',Val}, TagIn) ->
   'enc_ProbeInspectors'(Val, TagIn);

'enc_ProbeInspectors'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_ProbeInspectors_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn, EncBytes, EncLen).

'enc_ProbeInspectors_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ProbeInspectors_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = ?RT_BER:encode_restricted_string([], H, 19, [<<19>>]),
   'enc_ProbeInspectors_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_ProbeInspectors'(Tlv) ->
   'dec_ProbeInspectors'(Tlv, [16]).

'dec_ProbeInspectors'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 
[?RT_BER:decode_restricted_string(V1,[],19,[19]) || V1 <- Tlv1].




%%================================
%%  ProbeRRDCreate
%%================================
'enc_ProbeRRDCreate'(Val) ->
    'enc_ProbeRRDCreate'(Val, [<<19>>]).


'enc_ProbeRRDCreate'({'ProbeRRDCreate',Val}, TagIn) ->
   'enc_ProbeRRDCreate'(Val, TagIn);

'enc_ProbeRRDCreate'(Val, TagIn) ->
?RT_BER:encode_restricted_string([], Val, 19, TagIn).


'dec_ProbeRRDCreate'(Tlv) ->
   'dec_ProbeRRDCreate'(Tlv, [19]).

'dec_ProbeRRDCreate'(Tlv, TagIn) ->
?RT_BER:decode_restricted_string(Tlv,[],19,TagIn).



%%================================
%%  ProbeRRDUpdate
%%================================
'enc_ProbeRRDUpdate'(Val) ->
    'enc_ProbeRRDUpdate'(Val, [<<19>>]).


'enc_ProbeRRDUpdate'({'ProbeRRDUpdate',Val}, TagIn) ->
   'enc_ProbeRRDUpdate'(Val, TagIn);

'enc_ProbeRRDUpdate'(Val, TagIn) ->
?RT_BER:encode_restricted_string([], Val, 19, TagIn).


'dec_ProbeRRDUpdate'(Tlv) ->
   'dec_ProbeRRDUpdate'(Tlv, [19]).

'dec_ProbeRRDUpdate'(Tlv, TagIn) ->
?RT_BER:decode_restricted_string(Tlv,[],19,TagIn).



%%================================
%%  ProbeRRDGraph
%%================================
'enc_ProbeRRDGraph'(Val) ->
    'enc_ProbeRRDGraph'(Val, [<<19>>]).


'enc_ProbeRRDGraph'({'ProbeRRDGraph',Val}, TagIn) ->
   'enc_ProbeRRDGraph'(Val, TagIn);

'enc_ProbeRRDGraph'(Val, TagIn) ->
?RT_BER:encode_restricted_string([], Val, 19, TagIn).


'dec_ProbeRRDGraph'(Tlv) ->
   'dec_ProbeRRDGraph'(Tlv, [19]).

'dec_ProbeRRDGraph'(Tlv, TagIn) ->
?RT_BER:decode_restricted_string(Tlv,[],19,TagIn).



%%================================
%%  ProbeConf
%%================================
'enc_ProbeConf'(Val) ->
    'enc_ProbeConf'(Val, [<<48>>]).

'enc_ProbeConf'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute name(1) with type PrintableString
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], Cindex1, 19, [<<19>>]),

%%-------------------------------------------------
%% attribute type(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
fetch -> ?RT_BER:encode_enumerated(0,[<<10>>]);
status -> ?RT_BER:encode_enumerated(1,[<<10>>]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ProbeConf'(Tlv) ->
   'dec_ProbeConf'(Tlv, [16]).

'dec_ProbeConf'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 

%%-------------------------------------------------
%% attribute name(1) with type PrintableString
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = ?RT_BER:decode_restricted_string(V1,{0,30},19,[19]),

%%-------------------------------------------------
%% attribute type(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = ?RT_BER:decode_enumerated(V2,[],[{fetch,0},{status,1}],[10]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'ProbeConf', Term1, Term2}.



%%================================
%%  RRDFile
%%================================
'enc_RRDFile'(Val) ->
    'enc_RRDFile'(Val, [<<4>>]).


'enc_RRDFile'({'RRDFile',Val}, TagIn) ->
   'enc_RRDFile'(Val, TagIn);

'enc_RRDFile'(Val, TagIn) ->
?RT_BER:encode_octet_string([], Val, TagIn).


'dec_RRDFile'(Tlv) ->
   'dec_RRDFile'(Tlv, [4]).

'dec_RRDFile'(Tlv, TagIn) ->
?RT_BER:decode_octet_string(Tlv,[],TagIn).



%%================================
%%  ProbeInfo
%%================================
'enc_ProbeInfo'(Val) ->
    'enc_ProbeInfo'(Val, [<<48>>]).

'enc_ProbeInfo'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10, Cindex11} = Val,

%%-------------------------------------------------
%% attribute channel(1) with type PrintableString
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], Cindex1, 19, [<<19>>]),

%%-------------------------------------------------
%% attribute probeId(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute name(3) with type PrintableString
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_restricted_string([], Cindex3, 19, [<<19>>]),

%%-------------------------------------------------
%% attribute type(4) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes4,EncLen4} = case Cindex4 of
fetch -> ?RT_BER:encode_enumerated(0,[<<10>>]);
status -> ?RT_BER:encode_enumerated(1,[<<10>>]);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

%%-------------------------------------------------
%% attribute probeMod(5) with type PrintableString
%%-------------------------------------------------
   {EncBytes5,EncLen5} = ?RT_BER:encode_restricted_string([], Cindex5, 19, [<<19>>]),

%%-------------------------------------------------
%% attribute status(6) with type PrintableString
%%-------------------------------------------------
   {EncBytes6,EncLen6} = ?RT_BER:encode_restricted_string([], Cindex6, 19, [<<19>>]),

%%-------------------------------------------------
%% attribute step(7) with type INTEGER
%%-------------------------------------------------
   {EncBytes7,EncLen7} = ?RT_BER:encode_integer([], Cindex7, [<<2>>]),

%%-------------------------------------------------
%% attribute timeoutMax(8) with type INTEGER
%%-------------------------------------------------
   {EncBytes8,EncLen8} = ?RT_BER:encode_integer([], Cindex8, [<<2>>]),

%%-------------------------------------------------
%% attribute timeoutWait(9) with type INTEGER
%%-------------------------------------------------
   {EncBytes9,EncLen9} = ?RT_BER:encode_integer([], Cindex9, [<<2>>]),

%%-------------------------------------------------
%% attribute inspectors(10)   External ModTracker:ProbeInspectors
%%-------------------------------------------------
   {EncBytes10,EncLen10} = 'enc_ProbeInspectors'(Cindex10, [<<48>>]),

%%-------------------------------------------------
%% attribute infoType(11) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes11,EncLen11} = case Cindex11 of
create -> ?RT_BER:encode_enumerated(0,[<<10>>]);
delete -> ?RT_BER:encode_enumerated(1,[<<10>>]);
update -> ?RT_BER:encode_enumerated(2,[<<10>>]);
Enumval10 -> exit({error,{asn1, {enumerated_not_in_range,Enumval10}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ProbeInfo'(Tlv) ->
   'dec_ProbeInfo'(Tlv, [16]).

'dec_ProbeInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 

%%-------------------------------------------------
%% attribute channel(1) with type PrintableString
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = ?RT_BER:decode_restricted_string(V1,{0,50},19,[19]),

%%-------------------------------------------------
%% attribute probeId(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = ?RT_BER:decode_integer(V2,[],[2]),

%%-------------------------------------------------
%% attribute name(3) with type PrintableString
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = ?RT_BER:decode_restricted_string(V3,{0,30},19,[19]),

%%-------------------------------------------------
%% attribute type(4) with type ENUMERATED
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = ?RT_BER:decode_enumerated(V4,[],[{fetch,0},{status,1}],[10]),

%%-------------------------------------------------
%% attribute probeMod(5) with type PrintableString
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = ?RT_BER:decode_restricted_string(V5,[],19,[19]),

%%-------------------------------------------------
%% attribute status(6) with type PrintableString
%%-------------------------------------------------
[V6|Tlv7] = Tlv6, 
Term6 = ?RT_BER:decode_restricted_string(V6,{0,15},19,[19]),

%%-------------------------------------------------
%% attribute step(7) with type INTEGER
%%-------------------------------------------------
[V7|Tlv8] = Tlv7, 
Term7 = ?RT_BER:decode_integer(V7,[],[2]),

%%-------------------------------------------------
%% attribute timeoutMax(8) with type INTEGER
%%-------------------------------------------------
[V8|Tlv9] = Tlv8, 
Term8 = ?RT_BER:decode_integer(V8,[],[2]),

%%-------------------------------------------------
%% attribute timeoutWait(9) with type INTEGER
%%-------------------------------------------------
[V9|Tlv10] = Tlv9, 
Term9 = ?RT_BER:decode_integer(V9,[],[2]),

%%-------------------------------------------------
%% attribute inspectors(10)   External ModTracker:ProbeInspectors
%%-------------------------------------------------
[V10|Tlv11] = Tlv10, 
Term10 = 'dec_ProbeInspectors'(V10, [16]),

%%-------------------------------------------------
%% attribute infoType(11) with type ENUMERATED
%%-------------------------------------------------
[V11|Tlv12] = Tlv11, 
Term11 = ?RT_BER:decode_enumerated(V11,[],[{create,0},{delete,1},{update,2}],[10]),

case Tlv12 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv12}}}) % extra fields not allowed
end,
   {'ProbeInfo', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10, Term11}.



%%================================
%%  ProbeModuleInfo
%%================================
'enc_ProbeModuleInfo'(Val) ->
    'enc_ProbeModuleInfo'(Val, [<<48>>]).

'enc_ProbeModuleInfo'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute name(1) with type PrintableString
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], Cindex1, 19, [<<19>>]),

%%-------------------------------------------------
%% attribute info(2) with type PrintableString
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_restricted_string([], Cindex2, 19, [<<19>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ProbeModuleInfo'(Tlv) ->
   'dec_ProbeModuleInfo'(Tlv, [16]).

'dec_ProbeModuleInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 

%%-------------------------------------------------
%% attribute name(1) with type PrintableString
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = ?RT_BER:decode_restricted_string(V1,[],19,[19]),

%%-------------------------------------------------
%% attribute info(2) with type PrintableString
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = ?RT_BER:decode_restricted_string(V2,[],19,[19]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'ProbeModuleInfo', Term1, Term2}.



%%================================
%%  ProbeDump
%%================================
'enc_ProbeDump'(Val) ->
    'enc_ProbeDump'(Val, [<<48>>]).

'enc_ProbeDump'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute channel(1) with type PrintableString
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], Cindex1, 19, [<<19>>]),

%%-------------------------------------------------
%% attribute probeId(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute probeType(3) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case Cindex3 of
fetch -> ?RT_BER:encode_enumerated(0,[<<10>>]);
status -> ?RT_BER:encode_enumerated(1,[<<10>>]);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

%%-------------------------------------------------
%% attribute rrdData(4) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes4,EncLen4} = ?RT_BER:encode_octet_string([], Cindex4, [<<4>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ProbeDump'(Tlv) ->
   'dec_ProbeDump'(Tlv, [16]).

'dec_ProbeDump'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 

%%-------------------------------------------------
%% attribute channel(1) with type PrintableString
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = ?RT_BER:decode_restricted_string(V1,{0,50},19,[19]),

%%-------------------------------------------------
%% attribute probeId(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = ?RT_BER:decode_integer(V2,[],[2]),

%%-------------------------------------------------
%% attribute probeType(3) with type ENUMERATED
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = ?RT_BER:decode_enumerated(V3,[],[{fetch,0},{status,1}],[10]),

%%-------------------------------------------------
%% attribute rrdData(4) with type OCTET STRING
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = ?RT_BER:decode_octet_string(V4,[],[4]),

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'ProbeDump', Term1, Term2, Term3, Term4}.



%%================================
%%  ProbeFetch
%%================================
'enc_ProbeFetch'(Val) ->
    'enc_ProbeFetch'(Val, [<<48>>]).

'enc_ProbeFetch'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute channel(1) with type PrintableString
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], Cindex1, 19, [<<19>>]),

%%-------------------------------------------------
%% attribute probe(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute probeType(3) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case Cindex3 of
fetch -> ?RT_BER:encode_enumerated(0,[<<10>>]);
status -> ?RT_BER:encode_enumerated(1,[<<10>>]);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

%%-------------------------------------------------
%% attribute probeValue(4) with type INTEGER
%%-------------------------------------------------
   {EncBytes4,EncLen4} = ?RT_BER:encode_integer([], Cindex4, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ProbeFetch'(Tlv) ->
   'dec_ProbeFetch'(Tlv, [16]).

'dec_ProbeFetch'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 

%%-------------------------------------------------
%% attribute channel(1) with type PrintableString
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = ?RT_BER:decode_restricted_string(V1,{0,50},19,[19]),

%%-------------------------------------------------
%% attribute probe(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = ?RT_BER:decode_integer(V2,[],[2]),

%%-------------------------------------------------
%% attribute probeType(3) with type ENUMERATED
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = ?RT_BER:decode_enumerated(V3,[],[{fetch,0},{status,1}],[10]),

%%-------------------------------------------------
%% attribute probeValue(4) with type INTEGER
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = ?RT_BER:decode_integer(V4,[],[2]),

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'ProbeFetch', Term1, Term2, Term3, Term4}.



%%================================
%%  TargetInfo
%%================================
'enc_TargetInfo'(Val) ->
    'enc_TargetInfo'(Val, [<<48>>]).

'enc_TargetInfo'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6} = Val,

%%-------------------------------------------------
%% attribute channel(1) with type PrintableString
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], Cindex1, 19, [<<19>>]),

%%-------------------------------------------------
%% attribute hostname(2) with type PrintableString
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_restricted_string([], Cindex2, 19, [<<19>>]),

%%-------------------------------------------------
%% attribute ipAdd(3) with type PrintableString
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_restricted_string([], Cindex3, 19, [<<19>>]),

%%-------------------------------------------------
%% attribute tags(4)   External ModTracker:TargetTags
%%-------------------------------------------------
   {EncBytes4,EncLen4} = 'enc_TargetTags'(Cindex4, [<<48>>]),

%%-------------------------------------------------
%% attribute properties(5)   External ModTracker:TargetProperties
%%-------------------------------------------------
   {EncBytes5,EncLen5} = 'enc_TargetProperties'(Cindex5, [<<48>>]),

%%-------------------------------------------------
%% attribute type(6) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes6,EncLen6} = case Cindex6 of
create -> ?RT_BER:encode_enumerated(0,[<<10>>]);
delete -> ?RT_BER:encode_enumerated(1,[<<10>>]);
update -> ?RT_BER:encode_enumerated(2,[<<10>>]);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_TargetInfo'(Tlv) ->
   'dec_TargetInfo'(Tlv, [16]).

'dec_TargetInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 

%%-------------------------------------------------
%% attribute channel(1) with type PrintableString
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = ?RT_BER:decode_restricted_string(V1,{0,50},19,[19]),

%%-------------------------------------------------
%% attribute hostname(2) with type PrintableString
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = ?RT_BER:decode_restricted_string(V2,{0,50},19,[19]),

%%-------------------------------------------------
%% attribute ipAdd(3) with type PrintableString
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = ?RT_BER:decode_restricted_string(V3,[],19,[19]),

%%-------------------------------------------------
%% attribute tags(4)   External ModTracker:TargetTags
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = 'dec_TargetTags'(V4, [16]),

%%-------------------------------------------------
%% attribute properties(5)   External ModTracker:TargetProperties
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = 'dec_TargetProperties'(V5, [16]),

%%-------------------------------------------------
%% attribute type(6) with type ENUMERATED
%%-------------------------------------------------
[V6|Tlv7] = Tlv6, 
Term6 = ?RT_BER:decode_enumerated(V6,[],[{create,0},{delete,1},{update,2}],[10]),

case Tlv7 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv7}}}) % extra fields not allowed
end,
   {'TargetInfo', Term1, Term2, Term3, Term4, Term5, Term6}.



%%================================
%%  CommandResponce
%%================================
'enc_CommandResponce'(Val) ->
    'enc_CommandResponce'(Val, [<<48>>]).

'enc_CommandResponce'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute cmdId(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute cmdMsg(2) with type PrintableString
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_restricted_string([], Cindex2, 19, [<<19>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_CommandResponce'(Tlv) ->
   'dec_CommandResponce'(Tlv, [16]).

'dec_CommandResponce'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 

%%-------------------------------------------------
%% attribute cmdId(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = ?RT_BER:decode_integer(V1,[],[2]),

%%-------------------------------------------------
%% attribute cmdMsg(2) with type PrintableString
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = ?RT_BER:decode_restricted_string(V2,[],19,[19]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'CommandResponce', Term1, Term2}.



%%================================
%%  TargetCreate
%%================================
'enc_TargetCreate'(Val) ->
    'enc_TargetCreate'(Val, [<<48>>]).

'enc_TargetCreate'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5} = Val,

%%-------------------------------------------------
%% attribute ipAdd(1) with type PrintableString
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], Cindex1, 19, [<<19>>]),

%%-------------------------------------------------
%% attribute hostname(2) with type PrintableString
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_restricted_string([], Cindex2, 19, [<<19>>]),

%%-------------------------------------------------
%% attribute sysName(3) with type PrintableString
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_restricted_string([], Cindex3, 19, [<<19>>]),

%%-------------------------------------------------
%% attribute permConf(4)   External ModTracker:PermConf
%%-------------------------------------------------
   {EncBytes4,EncLen4} = 'enc_PermConf'(Cindex4, [<<48>>]),

%%-------------------------------------------------
%% attribute cmdId(5) with type INTEGER
%%-------------------------------------------------
   {EncBytes5,EncLen5} = ?RT_BER:encode_integer([], Cindex5, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_TargetCreate'(Tlv) ->
   'dec_TargetCreate'(Tlv, [16]).

'dec_TargetCreate'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 

%%-------------------------------------------------
%% attribute ipAdd(1) with type PrintableString
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = ?RT_BER:decode_restricted_string(V1,[],19,[19]),

%%-------------------------------------------------
%% attribute hostname(2) with type PrintableString
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = ?RT_BER:decode_restricted_string(V2,{0,50},19,[19]),

%%-------------------------------------------------
%% attribute sysName(3) with type PrintableString
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = ?RT_BER:decode_restricted_string(V3,{0,50},19,[19]),

%%-------------------------------------------------
%% attribute permConf(4)   External ModTracker:PermConf
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = 'dec_PermConf'(V4, [16]),

%%-------------------------------------------------
%% attribute cmdId(5) with type INTEGER
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = ?RT_BER:decode_integer(V5,[],[2]),

case Tlv6 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv6}}}) % extra fields not allowed
end,
   {'TargetCreate', Term1, Term2, Term3, Term4, Term5}.



%%================================
%%  ProbeCreate
%%================================
'enc_ProbeCreate'(Val) ->
    'enc_ProbeCreate'(Val, [<<48>>]).

'enc_ProbeCreate'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute target(1) with type PrintableString
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], Cindex1, 19, [<<19>>]),

%%-------------------------------------------------
%% attribute probeConf(2)   External ModTracker:ProbeConf
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_ProbeConf'(Cindex2, [<<48>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ProbeCreate'(Tlv) ->
   'dec_ProbeCreate'(Tlv, [16]).

'dec_ProbeCreate'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 

%%-------------------------------------------------
%% attribute target(1) with type PrintableString
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = ?RT_BER:decode_restricted_string(V1,{0,50},19,[19]),

%%-------------------------------------------------
%% attribute probeConf(2)   External ModTracker:ProbeConf
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_ProbeConf'(V2, [16]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'ProbeCreate', Term1, Term2}.



%%================================
%%  TargetUpdate
%%================================
'enc_TargetUpdate'(Val) ->
    'enc_TargetUpdate'(Val, [<<48>>]).

'enc_TargetUpdate'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute target(1) with type PrintableString
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], Cindex1, 19, [<<19>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_TargetUpdate'(Tlv) ->
   'dec_TargetUpdate'(Tlv, [16]).

'dec_TargetUpdate'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 

%%-------------------------------------------------
%% attribute target(1) with type PrintableString
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = ?RT_BER:decode_restricted_string(V1,{0,50},19,[19]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'TargetUpdate', Term1}.



%%================================
%%  TargetDelete
%%================================
'enc_TargetDelete'(Val) ->
    'enc_TargetDelete'(Val, [<<48>>]).

'enc_TargetDelete'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute target(1) with type PrintableString
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], Cindex1, 19, [<<19>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_TargetDelete'(Tlv) ->
   'dec_TargetDelete'(Tlv, [16]).

'dec_TargetDelete'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 

%%-------------------------------------------------
%% attribute target(1) with type PrintableString
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = ?RT_BER:decode_restricted_string(V1,{0,50},19,[19]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'TargetDelete', Term1}.



%%================================
%%  ProbeUpdate
%%================================
'enc_ProbeUpdate'(Val) ->
    'enc_ProbeUpdate'(Val, [<<48>>]).

'enc_ProbeUpdate'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute target(1) with type PrintableString
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], Cindex1, 19, [<<19>>]),

%%-------------------------------------------------
%% attribute probe(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], Cindex2, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ProbeUpdate'(Tlv) ->
   'dec_ProbeUpdate'(Tlv, [16]).

'dec_ProbeUpdate'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 

%%-------------------------------------------------
%% attribute target(1) with type PrintableString
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = ?RT_BER:decode_restricted_string(V1,{0,50},19,[19]),

%%-------------------------------------------------
%% attribute probe(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = ?RT_BER:decode_integer(V2,[],[2]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'ProbeUpdate', Term1, Term2}.



%%================================
%%  ProbeDelete
%%================================
'enc_ProbeDelete'(Val) ->
    'enc_ProbeDelete'(Val, [<<48>>]).

'enc_ProbeDelete'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute target(1) with type PrintableString
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], Cindex1, 19, [<<19>>]),

%%-------------------------------------------------
%% attribute probe(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], Cindex2, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ProbeDelete'(Tlv) ->
   'dec_ProbeDelete'(Tlv, [16]).

'dec_ProbeDelete'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 

%%-------------------------------------------------
%% attribute target(1) with type PrintableString
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = ?RT_BER:decode_restricted_string(V1,{0,50},19,[19]),

%%-------------------------------------------------
%% attribute probe(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = ?RT_BER:decode_integer(V2,[],[2]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'ProbeDelete', Term1, Term2}.



%%================================
%%  TrackerPDU
%%================================
'enc_TrackerPDU'(Val) ->
    'enc_TrackerPDU'(Val, []).


'enc_TrackerPDU'({'TrackerPDU',Val}, TagIn) ->
   'enc_TrackerPDU'(Val, TagIn);

'enc_TrackerPDU'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      fromServer ->
         'enc_TrackerPDU_fromServer'(element(2,Val), [<<160>>]);
      fromClient ->
         'enc_TrackerPDU_fromClient'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  TrackerPDU_fromServer
%%================================

'enc_TrackerPDU_fromServer'({'TrackerPDU_fromServer',Val}, TagIn) ->
   'enc_TrackerPDU_fromServer'(Val, TagIn);

'enc_TrackerPDU_fromServer'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      targetInfo ->
         'enc_TargetInfo'(element(2,Val), [<<161>>]);
      probeInfo ->
         'enc_ProbeInfo'(element(2,Val), [<<162>>]);
      probeFetch ->
         'enc_ProbeFetch'(element(2,Val), [<<163>>]);
      probeDump ->
         'enc_ProbeDump'(element(2,Val), [<<164>>]);
      cmdResp ->
         'enc_CommandResponce'(element(2,Val), [<<165>>]);
      probeModInfo ->
         'enc_ProbeModuleInfo'(element(2,Val), [<<166>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn, EncBytes, EncLen).


'dec_TrackerPDU_fromServer'(Tlv, TagIn) ->
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'targetInfo'
    {131073, V1} -> 
        {targetInfo, 'dec_TargetInfo'(V1, [])};


%% 'probeInfo'
    {131074, V1} -> 
        {probeInfo, 'dec_ProbeInfo'(V1, [])};


%% 'probeFetch'
    {131075, V1} -> 
        {probeFetch, 'dec_ProbeFetch'(V1, [])};


%% 'probeDump'
    {131076, V1} -> 
        {probeDump, 'dec_ProbeDump'(V1, [])};


%% 'cmdResp'
    {131077, V1} -> 
        {cmdResp, 'dec_CommandResponce'(V1, [])};


%% 'probeModInfo'
    {131078, V1} -> 
        {probeModInfo, 'dec_ProbeModuleInfo'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.



%%================================
%%  TrackerPDU_fromClient
%%================================

'enc_TrackerPDU_fromClient'({'TrackerPDU_fromClient',Val}, TagIn) ->
   'enc_TrackerPDU_fromClient'(Val, TagIn);

'enc_TrackerPDU_fromClient'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      createTarget ->
         'enc_TargetCreate'(element(2,Val), [<<161>>]);
      updateTarget ->
         'enc_TargetUpdate'(element(2,Val), [<<162>>]);
      deleteTarget ->
         'enc_TargetDelete'(element(2,Val), [<<163>>]);
      createProbe ->
         'enc_ProbeCreate'(element(2,Val), [<<164>>]);
      updateProbe ->
         'enc_ProbeUpdate'(element(2,Val), [<<165>>]);
      deleteProbe ->
         'enc_ProbeDelete'(element(2,Val), [<<166>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn, EncBytes, EncLen).


'dec_TrackerPDU_fromClient'(Tlv, TagIn) ->
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'createTarget'
    {131073, V1} -> 
        {createTarget, 'dec_TargetCreate'(V1, [])};


%% 'updateTarget'
    {131074, V1} -> 
        {updateTarget, 'dec_TargetUpdate'(V1, [])};


%% 'deleteTarget'
    {131075, V1} -> 
        {deleteTarget, 'dec_TargetDelete'(V1, [])};


%% 'createProbe'
    {131076, V1} -> 
        {createProbe, 'dec_ProbeCreate'(V1, [])};


%% 'updateProbe'
    {131077, V1} -> 
        {updateProbe, 'dec_ProbeUpdate'(V1, [])};


%% 'deleteProbe'
    {131078, V1} -> 
        {deleteProbe, 'dec_ProbeDelete'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


'dec_TrackerPDU'(Tlv) ->
   'dec_TrackerPDU'(Tlv, []).

'dec_TrackerPDU'(Tlv, TagIn) ->
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'fromServer'
    {131072, V1} -> 
        {fromServer, 'dec_TrackerPDU_fromServer'(V1, [])};


%% 'fromClient'
    {131073, V1} -> 
        {fromClient, 'dec_TrackerPDU_fromClient'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.

%% Generated by the Erlang ASN.1 BER-compiler version:1.8
%% Purpose: encoder and decoder to the types in mod AsnTest

-module('AsnTest').
-define('RT_BER',asn1rt_ber_bin).
-asn1_info([{vsn,'1.8'},
            {module,'AsnTest'},
            {options,[ber,{i,[46]}]}]).

-export([encoding_rule/0]).
-export([
'enc_AString'/2
]).

-export([
'dec_AString'/2
]).

-export([
'dec_AString'/3
]).

-export([info/0]).


-export([encode/2,decode/2,encode_disp/2,decode_disp/2]).

encoding_rule() ->
   ber.

encode(Type,Data) ->
case catch encode_disp(Type,Data) of
  {'EXIT',{error,Reason}} ->
    {error,Reason};
  {'EXIT',Reason} ->
    {error,{asn1,Reason}};
  {Bytes,_Len} ->
    {ok,wrap_encode(Bytes)};
  Bytes ->
    {ok,wrap_encode(Bytes)}
end.

decode(Type,Data) ->
case catch decode_disp(Type,wrap_decode(Data)) of
  {'EXIT',{error,Reason}} ->
    {error,Reason};
  {'EXIT',Reason} ->
    {error,{asn1,Reason}};
  {X,_Rest} ->
    {ok,X};
  {X,_Rest,_Len} ->
    {ok,X}
end.

encode_disp('AString',Data) -> 'enc_AString'(Data,[]);
encode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).


decode_disp('AString',Data) -> 'dec_AString'(Data,mandatory);
decode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).



wrap_encode(Bytes) when is_list(Bytes) ->
   binary_to_list(list_to_binary(Bytes));
wrap_encode(Bytes) when is_binary(Bytes) ->
   binary_to_list(Bytes);
wrap_encode(Bytes) -> Bytes.

wrap_decode(Bytes) when is_list(Bytes) ->
   list_to_binary(Bytes);
wrap_decode(Bytes) -> Bytes.


info() ->
   case ?MODULE:module_info() of
      MI when is_list(MI) ->
         case lists:keysearch(attributes,1,MI) of
            {value,{_,Attributes}} when is_list(Attributes) ->
               case lists:keysearch(asn1_info,1,Attributes) of
                  {value,{_,Info}} when is_list(Info) ->
                     Info;
                  _ ->
                     []
               end;
            _ ->
               []
         end
   end.


%%================================
%%  AString
%%================================

'enc_AString'({'AString',Val}, TagIn) ->
   'enc_AString'(Val, TagIn);

'enc_AString'(Val, TagIn) ->
?RT_BER:encode_restricted_string([], Val, 19, TagIn ++ []).


'dec_AString'(Bytes, OptOrMand) ->
   'dec_AString'(Bytes, OptOrMand, []).

'dec_AString'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_restricted_string(Bytes,[],19,TagIn++[], no_length, OptOrMand).

